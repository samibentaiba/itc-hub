// prisma\schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// --- NextAuth Models ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// --- Application Models ---
model User {
  id                     String             @id @default(cuid())
  email                  String             @unique
  emailVerified          DateTime
  name                   String
  password               String
  role                   Role               @default(USER)
  avatar                 String?
  status                 String?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  departments            DepartmentMember[]
  teams                  TeamMember[]
  createdTickets         Ticket[]           @relation("CreatedTickets")
  assignedTickets        Ticket[]           @relation("AssignedTickets")
  organizedEvents        Event[]            @relation("OrganizedEvents")
  messages               Message[]
  notifications          Notification[]
  files                  File[]
  profile                Profile?
  managingDepartments    Department[]       @relation("DepartmentManagers")
  leadingTeams           Team[]             @relation("TeamLeaders")
  collaboratingOnTickets Ticket[]           @relation("TicketCollaborators")
  attendedEvents         Event[]            @relation("EventAttendees")
  // Relations to NextAuth models
  accounts               Account[]
  sessions               Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Department {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  status      String?
  color       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  members     DepartmentMember[]
  teams       Team[]
  tickets     Ticket[]
  events      Event[]
  managers    User[]             @relation("DepartmentManagers")
}

model DepartmentMember {
  id           String         @id @default(cuid())
  userId       String
  departmentId String
  role         MembershipRole @default(MEMBER)
  joinedAt     DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id])
  department   Department     @relation(fields: [departmentId], references: [id])

  @@unique([userId, departmentId])
}

model Team {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String?
  status       String?
  departmentId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  members      TeamMember[]
  tickets      Ticket[]
  department   Department   @relation(fields: [departmentId], references: [id])
  leaders      User[]       @relation("TeamLeaders")
}

model TeamMember {
  id       String         @id @default(cuid())
  userId   String
  teamId   String
  role     MembershipRole @default(MEMBER)
  joinedAt DateTime       @default(now())
  user     User           @relation(fields: [userId], references: [id])
  team     Team           @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model Ticket {
  id            String         @id @default(cuid())
  title         String
  description   String?
  type          TicketType     @default(TASK)
  status        TicketStatus   @default(OPEN)
  priority      TicketPriority @default(MEDIUM)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  dueDate       DateTime?
  teamId        String?
  departmentId  String?
  assigneeId    String?
  createdById   String
  team          Team?          @relation(fields: [teamId], references: [id])
  department    Department?    @relation(fields: [departmentId], references: [id])
  assignee      User?          @relation("AssignedTickets", fields: [assigneeId], references: [id])
  createdBy     User           @relation("CreatedTickets", fields: [createdById], references: [id])
  messages      Message[]
  files         File[]
  collaborators User[]         @relation("TicketCollaborators")
}

model Message {
  id        String   @id @default(cuid())
  ticketId  String
  senderId  String
  content   String
  type      String
  timestamp DateTime @default(now())
  reactions Json?
  edited    Boolean  @default(false)
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
  files     File[]
}

model Event {
  id           String      @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  time         String?
  duration     Int?
  type         EventType
  status       EventStatus @default(CONFIRMED)
  location     String?
  organizerId  String?
  isRecurring  Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  organizer    User?       @relation("OrganizedEvents", fields: [organizerId], references: [id])
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  attendees    User[]      @relation("EventAttendees")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  title       String
  description String
  time        DateTime         @default(now())
  type        NotificationType
  unread      Boolean          @default(true)
  user        User             @relation(fields: [userId], references: [id])
}

model Profile {
  id           String        @id @default(cuid())
  userId       String        @unique
  realName     String?
  bio          String?
  profilePic   Bytes?
  achievements Achievement[]
  user         User          @relation(fields: [userId], references: [id])
}

model Achievement {
  id          String  @id @default(cuid())
  profileId   String
  title       String
  description String?
  badge       String?
  profile     Profile @relation(fields: [profileId], references: [id])
}

model File {
  id           String   @id @default(cuid())
  filename     String
  mimetype     String
  data         Bytes
  uploadedById String
  ticketId     String?
  messageId    String?
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  ticket       Ticket?  @relation(fields: [ticketId], references: [id])
  message      Message? @relation(fields: [messageId], references: [id])
  uploadedAt   DateTime @default(now())
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum MembershipRole {
  MANAGER
  MEMBER
}

enum EventType {
  MEETING
  REVIEW
  PLANNING
  WORKSHOP
}

enum EventStatus {
  PENDING
  CONFIRMED
}

enum TicketType {
  TASK
  MEETING
  EVENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationType {
  ASSIGNMENT
  VERIFICATION
  REMINDER
  TEAM
  GENERAL
}

model AppSecret {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}